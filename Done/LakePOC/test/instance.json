TruffleContract {
    constructor: {
        [Function: TruffleContract]
        _static_methods: {
            setProvider: [Function: setProvider],
            new: [Function: new],
            at: [Function: at],
            deployed: [Function: deployed],
            defaults: [Function: defaults],
            hasNetwork: [Function: hasNetwork],
            isDeployed: [Function: isDeployed],
            detectNetwork: [Function: detectNetwork],
            setNetwork: [Function: setNetwork],
            resetAddress: [Function: resetAddress],
            link: [Function: link],
            clone: [Function: clone],
            addProp: [Function: addProp],
            toJSON: [Function: toJSON]
        },
        _properties: {
            contract_name: [Object],
            contractName: [Object],
            abi: [Object],
            network: [Function: network],
            networks: [Function: networks],
            address: [Object],
            transactionHash: [Object],
            links: [Function: links],
            events: [Function: events],
            binary: [Function: binary],
            deployedBinary: [Function: deployedBinary],
            unlinked_binary: [Object],
            bytecode: [Object],
            deployedBytecode: [Object],
            sourceMap: [Object],
            deployedSourceMap: [Object],
            source: [Object],
            sourcePath: [Object],
            legacyAST: [Object],
            ast: [Object],
            compiler: [Object],
            schema_version: [Function: schema_version],
            schemaVersion: [Function: schemaVersion],
            updated_at: [Function: updated_at],
            updatedAt: [Function: updatedAt]
        },
        _property_values: {},
        _json: {
            contractName: 'CustomToken',
            abi: [Array],
            bytecode: '0x608060405234801561001057600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606460018190555060646000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60646040518082815260200191505060405180910390a36113a7806100fe6000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063095ea7b31461015a57806318160ddd146101bf57806323b872dd146101ea5780632ff2e9dc1461026f578063313ce5671461029a5780633c68eb81146102cb57806366188463146102e257806370a082311461034757806395d89b411461039e578063a9059cbb1461042e578063d73dd62314610493578063dd62ed3e146104f8575b600080fd5b3480156100d657600080fd5b506100df61056f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011f578082015181840152602081019050610104565b50505050905090810190601f16801561014c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016657600080fd5b506101a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a8565b604051808215151515815260200191505060405180910390f35b3480156101cb57600080fd5b506101d461069a565b6040518082815260200191505060405180910390f35b3480156101f657600080fd5b50610255600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106a4565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b50610284610a5f565b6040518082815260200191505060405180910390f35b3480156102a657600080fd5b506102af610a64565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102d757600080fd5b506102e0610a69565b005b3480156102ee57600080fd5b5061032d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b90565b604051808215151515815260200191505060405180910390f35b34801561035357600080fd5b50610388600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e22565b6040518082815260200191505060405180910390f35b3480156103aa57600080fd5b506103b3610e6a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f35780820151818401526020810190506103d8565b50505050905090810190601f1680156104205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043a57600080fd5b50610479600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ea3565b604051808215151515815260200191505060405180910390f35b34801561049f57600080fd5b506104de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110c3565b604051808215151515815260200191505060405180910390f35b34801561050457600080fd5b50610559600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112bf565b6040518082815260200191505060405180910390f35b6040805190810160405280601281526020017f4c616b65204e6574776f726b20546f6b656e000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156106f357600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561077e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156107ba57600080fd5b61080b826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461134690919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061089e826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135f90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061096f82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461134690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b606481565b601281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ac557600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631111515610aeb57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610b6a573d6000803e3d6000fd5b5060003073ffffffffffffffffffffffffffffffffffffffff1631141515610b8e57fe5b565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083101515610ca2576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d36565b610cb5838261134690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f4c4e54000000000000000000000000000000000000000000000000000000000081525081565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610ef257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f2e57600080fd5b610f7f826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461134690919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611012826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135f90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600061115482600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561135457fe5b818303905092915050565b6000818301905082811015151561137257fe5b809050929150505600a165627a7a72305820e06c36e5356254cd5efc877d98e865de9d6390c72113062094cfc5e0bb3160850029',
            deployedBytecode: '0x6080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063095ea7b31461015a57806318160ddd146101bf57806323b872dd146101ea5780632ff2e9dc1461026f578063313ce5671461029a5780633c68eb81146102cb57806366188463146102e257806370a082311461034757806395d89b411461039e578063a9059cbb1461042e578063d73dd62314610493578063dd62ed3e146104f8575b600080fd5b3480156100d657600080fd5b506100df61056f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011f578082015181840152602081019050610104565b50505050905090810190601f16801561014c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016657600080fd5b506101a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a8565b604051808215151515815260200191505060405180910390f35b3480156101cb57600080fd5b506101d461069a565b6040518082815260200191505060405180910390f35b3480156101f657600080fd5b50610255600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106a4565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b50610284610a5f565b6040518082815260200191505060405180910390f35b3480156102a657600080fd5b506102af610a64565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102d757600080fd5b506102e0610a69565b005b3480156102ee57600080fd5b5061032d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b90565b604051808215151515815260200191505060405180910390f35b34801561035357600080fd5b50610388600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e22565b6040518082815260200191505060405180910390f35b3480156103aa57600080fd5b506103b3610e6a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f35780820151818401526020810190506103d8565b50505050905090810190601f1680156104205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043a57600080fd5b50610479600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ea3565b604051808215151515815260200191505060405180910390f35b34801561049f57600080fd5b506104de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110c3565b604051808215151515815260200191505060405180910390f35b34801561050457600080fd5b50610559600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112bf565b6040518082815260200191505060405180910390f35b6040805190810160405280601281526020017f4c616b65204e6574776f726b20546f6b656e000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156106f357600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561077e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156107ba57600080fd5b61080b826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461134690919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061089e826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135f90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061096f82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461134690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b606481565b601281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ac557600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff1631111515610aeb57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610b6a573d6000803e3d6000fd5b5060003073ffffffffffffffffffffffffffffffffffffffff1631141515610b8e57fe5b565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083101515610ca2576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d36565b610cb5838261134690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f4c4e54000000000000000000000000000000000000000000000000000000000081525081565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610ef257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f2e57600080fd5b610f7f826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461134690919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611012826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135f90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600061115482600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561135457fe5b818303905092915050565b6000818301905082811015151561137257fe5b809050929150505600a165627a7a72305820e06c36e5356254cd5efc877d98e865de9d6390c72113062094cfc5e0bb3160850029',
            sourceMap: '115:908:1:-;;;510:210;8:9:-1;5:2;;;30:1;27;20:12;5:2;510:210:1;557:10;541:13;;:26;;;;;;;;;;;;;;;;;;440:3;577:12;:29;;;;440:3;616:8;:20;625:10;616:20;;;;;;;;;;;;;;;:37;;;;682:10;668:41;;677:3;668:41;440:3;668:41;;;;;;;;;;;;;;;;;;115:908;;;;;;',
            deployedSourceMap: '115:908:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;160:50;;8:9:-1;5:2;;;30:1;27;20:12;5:2;160:50:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;160:50:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1814:188:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1814:188:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;389:83:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;389:83:4;;;;;;;;;;;;;;;;;;;;;;;726:470:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;726:470:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;399:44:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;399:44:1;;;;;;;;;;;;;;;;;;;;;;;325:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;325:35:1;;;;;;;;;;;;;;;;;;;;;;;;;;;790:229;;8:9:-1;5:2;;;30:1;27;20:12;5:2;790:229:1;;;;;;3679:432:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3679:432:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1149:99:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1149:99:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;249:37:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;249:37:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;249:37:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;626:321:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;626:321:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2926:296:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2926:296:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2321:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2321:153:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;160:50:1;;;;;;;;;;;;;;;;;;;;:::o;1814:188:7:-;1881:4;1925:6;1893:7;:19;1901:10;1893:19;;;;;;;;;;;;;;;:29;1913:8;1893:29;;;;;;;;;;;;;;;:38;;;;1963:8;1942:38;;1951:10;1942:38;;;1973:6;1942:38;;;;;;;;;;;;;;;;;;1993:4;1986:11;;1814:188;;;;:::o;389:83:4:-;433:7;455:12;;448:19;;389:83;:::o;726:470:7:-;832:4;864:8;:15;873:5;864:15;;;;;;;;;;;;;;;;854:6;:25;;846:34;;;;;;;;904:7;:14;912:5;904:14;;;;;;;;;;;;;;;:26;919:10;904:26;;;;;;;;;;;;;;;;894:6;:36;;886:45;;;;;;;;960:1;945:17;;:3;:17;;;;937:26;;;;;;;;988:27;1008:6;988:8;:15;997:5;988:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;970:8;:15;979:5;970:15;;;;;;;;;;;;;;;:45;;;;1037:25;1055:6;1037:8;:13;1046:3;1037:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;1021:8;:13;1030:3;1021:13;;;;;;;;;;;;;;;:41;;;;1097:38;1128:6;1097:7;:14;1105:5;1097:14;;;;;;;;;;;;;;;:26;1112:10;1097:26;;;;;;;;;;;;;;;;:30;;:38;;;;:::i;:::-;1068:7;:14;1076:5;1068:14;;;;;;;;;;;;;;;:26;1083:10;1068:26;;;;;;;;;;;;;;;:67;;;;1162:3;1146:28;;1155:5;1146:28;;;1167:6;1146:28;;;;;;;;;;;;;;;;;;1187:4;1180:11;;726:470;;;;;:::o;399:44:1:-;440:3;399:44;:::o;325:35::-;358:2;325:35;:::o;790:229::-;854:13;;;;;;;;;;;840:27;;:10;:27;;;832:36;;;;;;;;910:1;894:4;886:21;;;:25;878:34;;;;;;;;923:13;;;;;;;;;;;:22;;:45;954:4;946:21;;;923:45;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;923:45:1;1010:1;993:4;985:21;;;:26;978:34;;;;;;790:229::o;3679:432:7:-;3785:4;3799:16;3818:7;:19;3826:10;3818:19;;;;;;;;;;;;;;;:29;3838:8;3818:29;;;;;;;;;;;;;;;;3799:48;;3877:8;3857:16;:28;;3853:165;;;3927:1;3895:7;:19;3903:10;3895:19;;;;;;;;;;;;;;;:29;3915:8;3895:29;;;;;;;;;;;;;;;:33;;;;3853:165;;;3981:30;3994:16;3981:8;:12;;:30;;;;:::i;:::-;3949:7;:19;3957:10;3949:19;;;;;;;;;;;;;;;:29;3969:8;3949:29;;;;;;;;;;;;;;;:62;;;;3853:165;4049:8;4028:61;;4037:10;4028:61;;;4059:7;:19;4067:10;4059:19;;;;;;;;;;;;;;;:29;4079:8;4059:29;;;;;;;;;;;;;;;;4028:61;;;;;;;;;;;;;;;;;;4102:4;4095:11;;3679:432;;;;;:::o;1149:99:4:-;1205:7;1227:8;:16;1236:6;1227:16;;;;;;;;;;;;;;;;1220:23;;1149:99;;;:::o;249:37:1:-;;;;;;;;;;;;;;;;;;;;:::o;626:321:4:-;689:4;719:8;:20;728:10;719:20;;;;;;;;;;;;;;;;709:6;:30;;701:39;;;;;;;;769:1;754:17;;:3;:17;;;;746:26;;;;;;;;802:32;827:6;802:8;:20;811:10;802:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;779:8;:20;788:10;779:20;;;;;;;;;;;;;;;:55;;;;856:25;874:6;856:8;:13;865:3;856:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;840:8;:13;849:3;840:13;;;;;;;;;;;;;;;:41;;;;913:3;892:33;;901:10;892:33;;;918:6;892:33;;;;;;;;;;;;;;;;;;938:4;931:11;;626:321;;;;:::o;2926:296:7:-;3027:4;3081:46;3115:11;3081:7;:19;3089:10;3081:19;;;;;;;;;;;;;;;:29;3101:8;3081:29;;;;;;;;;;;;;;;;:33;;:46;;;;:::i;:::-;3041:7;:19;3049:10;3041:19;;;;;;;;;;;;;;;:29;3061:8;3041:29;;;;;;;;;;;;;;;:87;;;;3160:8;3139:61;;3148:10;3139:61;;;3170:7;:19;3178:10;3170:19;;;;;;;;;;;;;;;:29;3190:8;3170:29;;;;;;;;;;;;;;;;3139:61;;;;;;;;;;;;;;;;;;3213:4;3206:11;;2926:296;;;;:::o;2321:153::-;2420:7;2444;:15;2452:6;2444:15;;;;;;;;;;;;;;;:25;2460:8;2444:25;;;;;;;;;;;;;;;;2437:32;;2321:153;;;;:::o;1060:116:3:-;1120:7;1148:2;1142;:8;;1135:16;;;;;;1169:2;1164;:7;1157:14;;1060:116;;;;:::o;1238:128::-;1298:9;1324:2;1319;:7;1315:11;;1344:2;1339:1;:7;;1332:15;;;;;;1360:1;1353:8;;1238:128;;;;:::o',
            source: 'pragma solidity ^0.4.22;\n\nimport "../node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol";\n\ncontract CustomToken is StandardToken {\n\n    string public constant name = "Lake Network Token"; // solium-disable-line uppercase\n    string public constant symbol = "LNT"; // solium-disable-line uppercase\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\n    uint256 public constant INITIAL_SUPPLY = 100; //* (10 ** uint256(decimals));\n    address owner_address;\n  \n    constructor() public {\n        owner_address = msg.sender;\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);    \n    }\n\n\n/// @notice Transfers the collected ETH to the contract owner.\n    function transferFunds() public {\n        require(msg.sender == owner_address);\n        require(address(this).balance > 0);\n\n      owner_address.transfer(address(this).balance);\n        assert(address(this).balance == 0);\n    }  \n}\n',
            sourcePath: '/home/dev-d/Desktop/BlockChain/LakePOC/contracts/CustomToken.sol',
            ast: [Object],
            legacyAST: [Object],
            compiler: [Object],
            networks: [Object],
            schemaVersion: '2.0.1',
            updatedAt: '2018-09-18T03:58:31.462Z'
        },
        setProvider: [Function: bound setProvider],
        new: [Function: bound new],
        at: [Function: bound at],
        deployed: [Function: bound deployed],
        defaults: [Function: bound defaults],
        hasNetwork: [Function: bound hasNetwork],
        isDeployed: [Function: bound isDeployed],
        detectNetwork: [Function: bound detectNetwork],
        setNetwork: [Function: bound setNetwork],
        resetAddress: [Function: bound resetAddress],
        link: [Function: bound link],
        clone: [Function: bound clone],
        addProp: [Function: bound addProp],
        toJSON: [Function: bound toJSON],
        web3: Web3 {
            _requestManager: [Object],
            currentProvider: [Object],
            eth: [Object],
            db: [Object],
            shh: [Object],
            net: [Object],
            personal: [Object],
            bzz: [Object],
            settings: [Object],
            version: [Object],
            providers: [Object],
            _extend: [Object]
        },
        class_defaults: {
            from: '0x9e831780eab11f74826a069514aaaca6928465ce',
            gas: 6721975,
            gasPrice: 100000000000
        },
        currentProvider: HttpProvider {
            host: 'http://127.0.0.1:9545',
            timeout: 0,
            user: undefined,
            password: undefined,
            headers: undefined,
            send: [Function],
            sendAsync: [Function],
            _alreadyWrapped: true
        },
        network_id: '4447'
    },
    abi: [{
            constant: true,
            inputs: [],
            name: 'name',
            outputs: [Array],
            payable: false,
            stateMutability: 'view',
            type: 'function'
        },
        {
            constant: false,
            inputs: [Array],
            name: 'approve',
            outputs: [Array],
            payable: false,
            stateMutability: 'nonpayable',
            type: 'function'
        },
        {
            constant: true,
            inputs: [],
            name: 'totalSupply',
            outputs: [Array],
            payable: false,
            stateMutability: 'view',
            type: 'function'
        },
        {
            constant: false,
            inputs: [Array],
            name: 'transferFrom',
            outputs: [Array],
            payable: false,
            stateMutability: 'nonpayable',
            type: 'function'
        },
        {
            constant: true,
            inputs: [],
            name: 'INITIAL_SUPPLY',
            outputs: [Array],
            payable: false,
            stateMutability: 'view',
            type: 'function'
        },
        {
            constant: true,
            inputs: [],
            name: 'decimals',
            outputs: [Array],
            payable: false,
            stateMutability: 'view',
            type: 'function'
        },
        {
            constant: false,
            inputs: [Array],
            name: 'decreaseApproval',
            outputs: [Array],
            payable: false,
            stateMutability: 'nonpayable',
            type: 'function'
        },
        {
            constant: true,
            inputs: [Array],
            name: 'balanceOf',
            outputs: [Array],
            payable: false,
            stateMutability: 'view',
            type: 'function'
        },
        {
            constant: true,
            inputs: [],
            name: 'symbol',
            outputs: [Array],
            payable: false,
            stateMutability: 'view',
            type: 'function'
        },
        {
            constant: false,
            inputs: [Array],
            name: 'transfer',
            outputs: [Array],
            payable: false,
            stateMutability: 'nonpayable',
            type: 'function'
        },
        {
            constant: false,
            inputs: [Array],
            name: 'increaseApproval',
            outputs: [Array],
            payable: false,
            stateMutability: 'nonpayable',
            type: 'function'
        },
        {
            constant: true,
            inputs: [Array],
            name: 'allowance',
            outputs: [Array],
            payable: false,
            stateMutability: 'view',
            type: 'function'
        },
        {
            inputs: [],
            payable: false,
            stateMutability: 'nonpayable',
            type: 'constructor'
        },
        {
            anonymous: false,
            inputs: [Array],
            name: 'Approval',
            type: 'event'
        },
        {
            anonymous: false,
            inputs: [Array],
            name: 'Transfer',
            type: 'event'
        },
        {
            constant: false,
            inputs: [],
            name: 'transferFunds',
            outputs: [],
            payable: false,
            stateMutability: 'nonpayable',
            type: 'function'
        }
    ],
    contract: Contract {
        _eth: Eth {
            _requestManager: [Object],
            getBalance: [Object],
            getStorageAt: [Object],
            getCode: [Object],
            getBlock: [Object],
            getUncle: [Object],
            getCompilers: [Object],
            getBlockTransactionCount: [Object],
            getBlockUncleCount: [Object],
            getTransaction: [Object],
            getTransactionFromBlock: [Object],
            getTransactionReceipt: [Object],
            getTransactionCount: [Object],
            call: [Object],
            estimateGas: [Object],
            sendRawTransaction: [Object],
            signTransaction: [Object],
            sendTransaction: [Object],
            sign: [Object],
            compile: [Object],
            submitWork: [Object],
            getWork: [Object],
            coinbase: [Getter],
            getCoinbase: [Object],
            mining: [Getter],
            getMining: [Object],
            hashrate: [Getter],
            getHashrate: [Object],
            syncing: [Getter],
            getSyncing: [Object],
            gasPrice: [Getter],
            getGasPrice: [Object],
            accounts: [Getter],
            getAccounts: [Object],
            blockNumber: [Getter],
            getBlockNumber: [Object],
            protocolVersion: [Getter],
            getProtocolVersion: [Object],
            iban: [Object],
            sendIBANTransaction: [Function: bound transfer]
        },
        transactionHash: null,
        address: '0x437b167cfefc3a0498565c5b2a492181052d4d59',
        abi: [
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object],
            [Object]
        ],
        name: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            '': [Circular]
        },
        approve: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            'address,uint256': [Circular]
        },
        totalSupply: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            '': [Circular]
        },
        transferFrom: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            'address,address,uint256': [Circular]
        },
        INITIAL_SUPPLY: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            '': [Circular]
        },
        decimals: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            '': [Circular]
        },
        decreaseApproval: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            'address,uint256': [Circular]
        },
        balanceOf: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            address: [Circular]
        },
        symbol: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            '': [Circular]
        },
        transfer: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            'address,uint256': [Circular]
        },
        increaseApproval: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            'address,uint256': [Circular]
        },
        allowance: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            'address,address': [Circular]
        },
        transferFunds: {
            [Function: bound]
            request: [Function: bound],
            call: [Function: bound],
            sendTransaction: [Function: bound],
            estimateGas: [Function: bound],
            getData: [Function: bound],
            '': [Circular]
        },
        allEvents: [Function: bound],
        Approval: {
            [Function: bound]
            'address,address,uint256': [Function: bound]
        },
        Transfer: {
            [Function: bound]
            'address,address,uint256': [Function: bound]
        }
    },
    name: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    approve: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    totalSupply: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    transferFrom: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    INITIAL_SUPPLY: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    decimals: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    decreaseApproval: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    balanceOf: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    symbol: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    transfer: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    increaseApproval: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    allowance: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    Approval: {
        [Function: bound]
        'address,address,uint256': [Function: bound]
    },
    Transfer: {
        [Function: bound]
        'address,address,uint256': [Function: bound]
    },
    transferFunds: {
        [Function]
        call: [Function],
        sendTransaction: [Function],
        request: [Function: bound],
        estimateGas: [Function]
    },
    sendTransaction: [Function],
    send: [Function],
    allEvents: [Function: bound],
    address: '0x437b167cfefc3a0498565c5b2a492181052d4d59',
    transactionHash: null
}